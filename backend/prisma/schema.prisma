// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  listings Listing[]
  bookings Booking[]
  reviews  Review[]

  @@map("users")
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Decimal  @db.Decimal(10, 2)
  category    String
  location    String
  images      String[] // Array of image URLs
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner relation
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relations
  bookings Booking[]
  reviews  Review[]

  @@map("listings")
}

model Booking {
  id        String        @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  totalCost Decimal       @db.Decimal(10, 2)
  status    BookingStatus @default(PENDING)
  message   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  // Ensure one review per user per listing
  @@unique([userId, listingId])
  @@map("reviews")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

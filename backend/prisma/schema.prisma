generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  email         String         @unique
  firstName     String?
  lastName      String?
  phone         String?
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookings      Booking[]
  listings      Listing[]
  reviews       Review[]
  notifications Notification[]

  @@map("users")
}

model Listing {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Decimal   @db.Decimal(10, 2)
  category    String
  location    String
  images      String[]
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  bookings    Booking[]
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@map("listings")
}

model Booking {
  id        String        @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  totalCost Decimal       @db.Decimal(10, 2)
  status    BookingStatus @default(PENDING)
  message   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  listingId String
  listing   Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat?

  @@map("bookings")
}

model Chat {
  id        String    @id @default(cuid())
  bookingId String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  sender    String
  userId    String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("reviews")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'chat_message', 'booking_confirmed', 'booking_cancelled', etc.
  title     String
  message   String
  read      Boolean  @default(false)
  userId    String   // User who receives the notification
  relatedId String?  // ID of related entity (booking, chat, etc.)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
